generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  email     String   @unique
  password  String
  phone     String?
  avatar    String?
  bio       String?
  roleId    String
  isActive  Boolean  @default(true)
  role      Role     @relation(fields: [roleId], references: [id])

  mentor       Mentor?     @relation("MentorUser")
  consultant   Consultant? @relation("ConsultantUser")
  mentorId     String?
  consultantId String?
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("roles")
}

model Mentor {
  id             String   @id @default(uuid())
  user           User     @relation("MentorUser", fields: [userId], references: [id])
  userId         String   @unique
  area           String
  specialization String
  availableSlots String[]
  experience     String?
  successStories String?
  certifications String?
  projects       String?
  methods        String?
  strategy       String?
  tools          String?
  methodologies  String?
}

model Consultant {
  id                String   @id @default(uuid())
  user              User     @relation("ConsultantUser", fields: [userId], references: [id])
  userId            String   @unique
  area              String
  specialization    String
  availableSlots    String[]
  experience        String?
  successStories    String?
  certifications    String?
  projects          String?
  methods           String?
  professionalSince DateTime
  strategy          String?
  tools             String?
  methodologies     String?
  prices            Price[]
}

model Price {
  id           String     @id @default(uuid())
  consultantId String
  consultant   Consultant @relation(fields: [consultantId], references: [id])
  price        Float
  unit         String
}
