generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BudgetStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RoleType {
  ADMIN
  MANAGER
  USER
  FINANCE
  AUDITOR
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  name          String
  email         String    @unique
  password      String
  roleId        String
  planId        String?
  testStartDate DateTime?
  isActive      Boolean   @default(true)
  role          Role      @relation(fields: [roleId], references: [id])
  plan          Plan?     @relation(fields: [planId], references: [id])

  budgets   Budget[]
  payments  Payment[]
  auditLogs AuditLog[]

  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@map("role_permissions")
}

model Plan {
  id        String   @id @default(uuid())
  name      String   @unique
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("plans")
}

model Budget {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  title       String
  description String?
  status      BudgetStatus @default(PENDING)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  items       BudgetItem[]
  payments    Payment[]

  @@map("budgets")
}

model BudgetItem {
  id         String  @id @default(uuid())
  budgetId   String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  product    Product @relation(fields: [productId], references: [id])
  budget     Budget  @relation(fields: [budgetId], references: [id])

  @@map("budget_items")
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  budgetItems BudgetItem[]

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]

  @@map("categories")
}

model Payment {
  id               String        @id @default(uuid())
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  amount           Float
  status           PaymentStatus @default(PENDING)
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  budgetId         String
  budget           Budget        @relation(fields: [budgetId], references: [id])
  gatewayReference String?       @map("gateway_reference")
  gatewayStatus    String?       @map("gateway_status")

  @@map("payments")
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}
